@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService
@*@attribute [Authorize]*@

@if (Product == null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@Product.ImageUrl" alt="@Product.Title" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@Product.Title</h2>
            <p>@Product.Description</p>
            @if (Product.Varians != null & Product.Varians?.Count > 1)
            {
                <div class="mb-3">
                    @if (Product.Varians != null)
                    {
                        <select class="form-select" @bind="currentTypeId">
                            @foreach (var variant in Product.Varians)
                            {
                                <option value="@variant.ProductTypeId">@variant?.ProductType?.Name</option>
                            }
                        </select>
                    }
                </div>
            }
            @if (GetSelectedVariant() != null)
            {
                @if (GetSelectedVariant()?.OriginalPrice > GetSelectedVariant()?.Price)
                {
                    <h6 class="text-muted original-price">$@GetSelectedVariant()?.OriginalPrice</h6>
                }
                <h4 class="price">$@GetSelectedVariant()?.Price</h4>
            }
            <button class="btn btn-outline-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp; Add To Cart
            </button>

        </div>
    </div>
}



@code {

    [Parameter]
    public int Id { get; set; }

    public Product? Product { get; set; } = null;

    private string message = string.Empty;

    private int currentTypeId = 1;



    protected override async Task OnParametersSetAsync()
    {
        message = "Loading product...";
        var result = await ProductService.GetProductAsync(Id);
        if (result.Success)
        {
            Product = result.Data;
            if (Product != null && Product.Varians.Count > 0)
            {
                currentTypeId = Product.Varians[0].ProductTypeId;
            }
        }
        else
        {
            message = result.Message;
        }


    }
    private ProductVariant? GetSelectedVariant()
    {
        var variant = Product?.Varians.FirstOrDefault(p => p.ProductTypeId == currentTypeId);
        return variant;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Varians;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"{variants[0].Price}";
        }
        else
        {
            decimal minPrice = variants.Min(v => v.Price);
            return $"Starting at {minPrice}";
        }

    }


    public async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        if (productVariant!=null)
        {
            var cartItem = new CartItem
                {
                    ProductId = productVariant.ProductId,
                    ProductTypeId = productVariant.ProductTypeId
                };
            await CartService.AddToCart(cartItem);
        }

    }



}
