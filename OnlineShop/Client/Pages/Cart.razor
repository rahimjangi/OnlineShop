@page "/cart"
@inject ICartService CartService
@*@attribute [Authorize]*@

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts==null || cartProducts.Count==0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image " />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br/>
                    <input type="number" min="1" class="input-quantity form-control"
                           value="@product.Quantity"
                    @onchange="@((ChangeEventArgs e)=>UpdateQuantity(e,product))"/>
                    <button class="btn-delete" @onclick="@(()=> RepoveProductFromCart(product.ProductId,product.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
            <hr />
        }
        <div class="cart-product-class"> 
            Total (@cartProducts.Count): $@cartProducts.Sum(product=>product.Price * product.Quantity)
        </div>
    </div>
}

@code {
    List<CartProductResponse> cartProducts=null!;
    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RepoveProductFromCart(int productId,int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        if ((await CartService.GetCartItems()).Count == 0)
        {
            message = "Your cart is empty";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        if (e.Value!=null)
        {
            product.Quantity = int.Parse(e.Value.ToString());
        }
        if (product.Quantity < 1)
        {
            product.Quantity = 1;
        }
        await CartService.UpdateQuantity(product);
    }

}