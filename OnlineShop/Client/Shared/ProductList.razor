
@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>Loading Products...</span>
}
else
{
    <h3>Product List</h3>
    <div class="container">


        <ul class="list-unstyled">
            @foreach (Product product in ProductService.Products)
            {
                <li class="media my-3">
                    <div class="media-img-wrapper mr-2">
                        <a href="product/@product.Id">
                            <img src="@product.ImageUrl" class="media-img">
                        </a>
                    </div>
                    <div class="media-body">
                        <a href="product/@product.Id">
                            <h4 class="mb-0">@product.Title</h4>
                        </a>
                        <p>@product.Description</p>
                        <h5 class="price">$@product.Price.ToString("00.00")</h5>
                    </div>
                </li>
            }
        </ul>
    </div>
}





@code {


    protected override async Task OnInitializedAsync()
    {
        ProductService.ProductChanged += StateHasChanged;
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        ProductService.ProductChanged -= StateHasChanged;
    }

}
